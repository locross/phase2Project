{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst coverage = require('istanbul-lib-coverage');\n\nconst Path = require('./path');\n\nconst {\n  BaseNode,\n  BaseTree\n} = require('./tree');\n\nclass ReportNode extends BaseNode {\n  constructor(path, fileCoverage) {\n    super();\n    this.path = path;\n    this.parent = null;\n    this.fileCoverage = fileCoverage;\n    this.children = [];\n  }\n\n  static createRoot(children) {\n    const root = new ReportNode(new Path([]));\n    children.forEach(child => {\n      root.addChild(child);\n    });\n    return root;\n  }\n\n  addChild(child) {\n    child.parent = this;\n    this.children.push(child);\n  }\n\n  asRelative(p) {\n    if (p.substring(0, 1) === '/') {\n      return p.substring(1);\n    }\n\n    return p;\n  }\n\n  getQualifiedName() {\n    return this.asRelative(this.path.toString());\n  }\n\n  getRelativeName() {\n    const parent = this.getParent();\n    const myPath = this.path;\n    let relPath;\n    let i;\n    const parentPath = parent ? parent.path : new Path([]);\n\n    if (parentPath.ancestorOf(myPath)) {\n      relPath = new Path(myPath.elements());\n\n      for (i = 0; i < parentPath.length; i += 1) {\n        relPath.shift();\n      }\n\n      return this.asRelative(relPath.toString());\n    }\n\n    return this.asRelative(this.path.toString());\n  }\n\n  getParent() {\n    return this.parent;\n  }\n\n  getChildren() {\n    return this.children;\n  }\n\n  isSummary() {\n    return !this.fileCoverage;\n  }\n\n  getFileCoverage() {\n    return this.fileCoverage;\n  }\n\n  getCoverageSummary(filesOnly) {\n    const cacheProp = `c_${filesOnly ? 'files' : 'full'}`;\n    let summary;\n\n    if (Object.prototype.hasOwnProperty.call(this, cacheProp)) {\n      return this[cacheProp];\n    }\n\n    if (!this.isSummary()) {\n      summary = this.getFileCoverage().toSummary();\n    } else {\n      let count = 0;\n      summary = coverage.createCoverageSummary();\n      this.getChildren().forEach(child => {\n        if (filesOnly && child.isSummary()) {\n          return;\n        }\n\n        count += 1;\n        summary.merge(child.getCoverageSummary(filesOnly));\n      });\n\n      if (count === 0 && filesOnly) {\n        summary = null;\n      }\n    }\n\n    this[cacheProp] = summary;\n    return summary;\n  }\n\n}\n\nclass ReportTree extends BaseTree {\n  constructor(root, childPrefix) {\n    super(root);\n\n    const maybePrefix = node => {\n      if (childPrefix && !node.isRoot()) {\n        node.path.unshift(childPrefix);\n      }\n    };\n\n    this.visit({\n      onDetail: maybePrefix,\n\n      onSummary(node) {\n        maybePrefix(node);\n        node.children.sort((a, b) => {\n          const astr = a.path.toString();\n          const bstr = b.path.toString();\n          return astr < bstr ? -1 : astr > bstr ? 1 :\n          /* istanbul ignore next */\n          0;\n        });\n      }\n\n    });\n  }\n\n}\n\nfunction findCommonParent(paths) {\n  return paths.reduce((common, path) => common.commonPrefixPath(path), paths[0] || new Path([]));\n}\n\nfunction findOrCreateParent(parentPath, nodeMap) {\n  let created = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let parent = nodeMap[parentPath.toString()];\n\n  if (!parent) {\n    parent = new ReportNode(parentPath);\n    nodeMap[parentPath.toString()] = parent;\n    created(parentPath, parent);\n  }\n\n  return parent;\n}\n\nfunction toDirParents(list) {\n  const nodeMap = Object.create(null);\n  list.forEach(o => {\n    const parent = findOrCreateParent(o.path.parent(), nodeMap);\n    parent.addChild(new ReportNode(o.path, o.fileCoverage));\n  });\n  return Object.values(nodeMap);\n}\n\nfunction addAllPaths(topPaths, nodeMap, path, node) {\n  const parent = findOrCreateParent(path.parent(), nodeMap, (parentPath, parent) => {\n    if (parentPath.hasParent()) {\n      addAllPaths(topPaths, nodeMap, parentPath, parent);\n    } else {\n      topPaths.push(parent);\n    }\n  });\n  parent.addChild(node);\n}\n\nfunction foldIntoOneDir(node, parent) {\n  const {\n    children\n  } = node;\n\n  if (children.length === 1 && !children[0].fileCoverage) {\n    children[0].parent = parent;\n    return foldIntoOneDir(children[0], parent);\n  }\n\n  node.children = children.map(child => foldIntoOneDir(child, node));\n  return node;\n}\n\nfunction pkgSummaryPrefix(dirParents, commonParent) {\n  if (!dirParents.some(dp => dp.path.length === 0)) {\n    return;\n  }\n\n  if (commonParent.length === 0) {\n    return 'root';\n  }\n\n  return commonParent.name();\n}\n\nclass SummarizerFactory {\n  constructor(coverageMap) {\n    let defaultSummarizer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pkg';\n    this._coverageMap = coverageMap;\n    this._defaultSummarizer = defaultSummarizer;\n    this._initialList = coverageMap.files().map(filePath => ({\n      filePath,\n      path: new Path(filePath),\n      fileCoverage: coverageMap.fileCoverageFor(filePath)\n    }));\n    this._commonParent = findCommonParent(this._initialList.map(o => o.path.parent()));\n\n    if (this._commonParent.length > 0) {\n      this._initialList.forEach(o => {\n        o.path.splice(0, this._commonParent.length);\n      });\n    }\n  }\n\n  get defaultSummarizer() {\n    return this[this._defaultSummarizer];\n  }\n\n  get flat() {\n    if (!this._flat) {\n      this._flat = new ReportTree(ReportNode.createRoot(this._initialList.map(node => new ReportNode(node.path, node.fileCoverage))));\n    }\n\n    return this._flat;\n  }\n\n  _createPkg() {\n    const dirParents = toDirParents(this._initialList);\n\n    if (dirParents.length === 1) {\n      return new ReportTree(dirParents[0]);\n    }\n\n    return new ReportTree(ReportNode.createRoot(dirParents), pkgSummaryPrefix(dirParents, this._commonParent));\n  }\n\n  get pkg() {\n    if (!this._pkg) {\n      this._pkg = this._createPkg();\n    }\n\n    return this._pkg;\n  }\n\n  _createNested() {\n    const nodeMap = Object.create(null);\n    const topPaths = [];\n\n    this._initialList.forEach(o => {\n      const node = new ReportNode(o.path, o.fileCoverage);\n      addAllPaths(topPaths, nodeMap, o.path, node);\n    });\n\n    const topNodes = topPaths.map(node => foldIntoOneDir(node));\n\n    if (topNodes.length === 1) {\n      return new ReportTree(topNodes[0]);\n    }\n\n    return new ReportTree(ReportNode.createRoot(topNodes));\n  }\n\n  get nested() {\n    if (!this._nested) {\n      this._nested = this._createNested();\n    }\n\n    return this._nested;\n  }\n\n}\n\nmodule.exports = SummarizerFactory;","map":{"version":3,"names":["coverage","require","Path","BaseNode","BaseTree","ReportNode","constructor","path","fileCoverage","parent","children","createRoot","root","forEach","child","addChild","push","asRelative","p","substring","getQualifiedName","toString","getRelativeName","getParent","myPath","relPath","i","parentPath","ancestorOf","elements","length","shift","getChildren","isSummary","getFileCoverage","getCoverageSummary","filesOnly","cacheProp","summary","Object","prototype","hasOwnProperty","call","toSummary","count","createCoverageSummary","merge","ReportTree","childPrefix","maybePrefix","node","isRoot","unshift","visit","onDetail","onSummary","sort","a","b","astr","bstr","findCommonParent","paths","reduce","common","commonPrefixPath","findOrCreateParent","nodeMap","created","toDirParents","list","create","o","values","addAllPaths","topPaths","hasParent","foldIntoOneDir","map","pkgSummaryPrefix","dirParents","commonParent","some","dp","name","SummarizerFactory","coverageMap","defaultSummarizer","_coverageMap","_defaultSummarizer","_initialList","files","filePath","fileCoverageFor","_commonParent","splice","flat","_flat","_createPkg","pkg","_pkg","_createNested","topNodes","nested","_nested","module","exports"],"sources":["/home/locr/SE_Work/phase2Project/node_modules/istanbul-lib-report/lib/summarizer-factory.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst coverage = require('istanbul-lib-coverage');\nconst Path = require('./path');\nconst { BaseNode, BaseTree } = require('./tree');\n\nclass ReportNode extends BaseNode {\n    constructor(path, fileCoverage) {\n        super();\n\n        this.path = path;\n        this.parent = null;\n        this.fileCoverage = fileCoverage;\n        this.children = [];\n    }\n\n    static createRoot(children) {\n        const root = new ReportNode(new Path([]));\n\n        children.forEach(child => {\n            root.addChild(child);\n        });\n\n        return root;\n    }\n\n    addChild(child) {\n        child.parent = this;\n        this.children.push(child);\n    }\n\n    asRelative(p) {\n        if (p.substring(0, 1) === '/') {\n            return p.substring(1);\n        }\n        return p;\n    }\n\n    getQualifiedName() {\n        return this.asRelative(this.path.toString());\n    }\n\n    getRelativeName() {\n        const parent = this.getParent();\n        const myPath = this.path;\n        let relPath;\n        let i;\n        const parentPath = parent ? parent.path : new Path([]);\n        if (parentPath.ancestorOf(myPath)) {\n            relPath = new Path(myPath.elements());\n            for (i = 0; i < parentPath.length; i += 1) {\n                relPath.shift();\n            }\n            return this.asRelative(relPath.toString());\n        }\n        return this.asRelative(this.path.toString());\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    getChildren() {\n        return this.children;\n    }\n\n    isSummary() {\n        return !this.fileCoverage;\n    }\n\n    getFileCoverage() {\n        return this.fileCoverage;\n    }\n\n    getCoverageSummary(filesOnly) {\n        const cacheProp = `c_${filesOnly ? 'files' : 'full'}`;\n        let summary;\n\n        if (Object.prototype.hasOwnProperty.call(this, cacheProp)) {\n            return this[cacheProp];\n        }\n\n        if (!this.isSummary()) {\n            summary = this.getFileCoverage().toSummary();\n        } else {\n            let count = 0;\n            summary = coverage.createCoverageSummary();\n            this.getChildren().forEach(child => {\n                if (filesOnly && child.isSummary()) {\n                    return;\n                }\n                count += 1;\n                summary.merge(child.getCoverageSummary(filesOnly));\n            });\n            if (count === 0 && filesOnly) {\n                summary = null;\n            }\n        }\n        this[cacheProp] = summary;\n        return summary;\n    }\n}\n\nclass ReportTree extends BaseTree {\n    constructor(root, childPrefix) {\n        super(root);\n\n        const maybePrefix = node => {\n            if (childPrefix && !node.isRoot()) {\n                node.path.unshift(childPrefix);\n            }\n        };\n        this.visit({\n            onDetail: maybePrefix,\n            onSummary(node) {\n                maybePrefix(node);\n                node.children.sort((a, b) => {\n                    const astr = a.path.toString();\n                    const bstr = b.path.toString();\n                    return astr < bstr\n                        ? -1\n                        : astr > bstr\n                        ? 1\n                        : /* istanbul ignore next */ 0;\n                });\n            }\n        });\n    }\n}\n\nfunction findCommonParent(paths) {\n    return paths.reduce(\n        (common, path) => common.commonPrefixPath(path),\n        paths[0] || new Path([])\n    );\n}\n\nfunction findOrCreateParent(parentPath, nodeMap, created = () => {}) {\n    let parent = nodeMap[parentPath.toString()];\n\n    if (!parent) {\n        parent = new ReportNode(parentPath);\n        nodeMap[parentPath.toString()] = parent;\n        created(parentPath, parent);\n    }\n\n    return parent;\n}\n\nfunction toDirParents(list) {\n    const nodeMap = Object.create(null);\n    list.forEach(o => {\n        const parent = findOrCreateParent(o.path.parent(), nodeMap);\n        parent.addChild(new ReportNode(o.path, o.fileCoverage));\n    });\n\n    return Object.values(nodeMap);\n}\n\nfunction addAllPaths(topPaths, nodeMap, path, node) {\n    const parent = findOrCreateParent(\n        path.parent(),\n        nodeMap,\n        (parentPath, parent) => {\n            if (parentPath.hasParent()) {\n                addAllPaths(topPaths, nodeMap, parentPath, parent);\n            } else {\n                topPaths.push(parent);\n            }\n        }\n    );\n\n    parent.addChild(node);\n}\n\nfunction foldIntoOneDir(node, parent) {\n    const { children } = node;\n    if (children.length === 1 && !children[0].fileCoverage) {\n        children[0].parent = parent;\n        return foldIntoOneDir(children[0], parent);\n    }\n    node.children = children.map(child => foldIntoOneDir(child, node));\n    return node;\n}\n\nfunction pkgSummaryPrefix(dirParents, commonParent) {\n    if (!dirParents.some(dp => dp.path.length === 0)) {\n        return;\n    }\n\n    if (commonParent.length === 0) {\n        return 'root';\n    }\n\n    return commonParent.name();\n}\n\nclass SummarizerFactory {\n    constructor(coverageMap, defaultSummarizer = 'pkg') {\n        this._coverageMap = coverageMap;\n        this._defaultSummarizer = defaultSummarizer;\n        this._initialList = coverageMap.files().map(filePath => ({\n            filePath,\n            path: new Path(filePath),\n            fileCoverage: coverageMap.fileCoverageFor(filePath)\n        }));\n        this._commonParent = findCommonParent(\n            this._initialList.map(o => o.path.parent())\n        );\n        if (this._commonParent.length > 0) {\n            this._initialList.forEach(o => {\n                o.path.splice(0, this._commonParent.length);\n            });\n        }\n    }\n\n    get defaultSummarizer() {\n        return this[this._defaultSummarizer];\n    }\n\n    get flat() {\n        if (!this._flat) {\n            this._flat = new ReportTree(\n                ReportNode.createRoot(\n                    this._initialList.map(\n                        node => new ReportNode(node.path, node.fileCoverage)\n                    )\n                )\n            );\n        }\n\n        return this._flat;\n    }\n\n    _createPkg() {\n        const dirParents = toDirParents(this._initialList);\n        if (dirParents.length === 1) {\n            return new ReportTree(dirParents[0]);\n        }\n\n        return new ReportTree(\n            ReportNode.createRoot(dirParents),\n            pkgSummaryPrefix(dirParents, this._commonParent)\n        );\n    }\n\n    get pkg() {\n        if (!this._pkg) {\n            this._pkg = this._createPkg();\n        }\n\n        return this._pkg;\n    }\n\n    _createNested() {\n        const nodeMap = Object.create(null);\n        const topPaths = [];\n        this._initialList.forEach(o => {\n            const node = new ReportNode(o.path, o.fileCoverage);\n            addAllPaths(topPaths, nodeMap, o.path, node);\n        });\n\n        const topNodes = topPaths.map(node => foldIntoOneDir(node));\n        if (topNodes.length === 1) {\n            return new ReportTree(topNodes[0]);\n        }\n\n        return new ReportTree(ReportNode.createRoot(topNodes));\n    }\n\n    get nested() {\n        if (!this._nested) {\n            this._nested = this._createNested();\n        }\n\n        return this._nested;\n    }\n}\n\nmodule.exports = SummarizerFactory;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
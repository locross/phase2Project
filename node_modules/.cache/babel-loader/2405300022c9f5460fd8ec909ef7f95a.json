{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\n\nconst dataProperties = require('./data-properties');\n\nconst {\n  CoverageSummary\n} = require('./coverage-summary'); // returns a data object that represents empty coverage\n\n\nfunction emptyCoverage(filePath, reportLogic) {\n  const cov = {\n    path: filePath,\n    statementMap: {},\n    fnMap: {},\n    branchMap: {},\n    s: {},\n    f: {},\n    b: {}\n  };\n  if (reportLogic) cov.bT = {};\n  return cov;\n} // asserts that a data object \"looks like\" a coverage object\n\n\nfunction assertValidObject(obj) {\n  const valid = obj && obj.path && obj.statementMap && obj.fnMap && obj.branchMap && obj.s && obj.f && obj.b;\n\n  if (!valid) {\n    throw new Error('Invalid file coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\n\nconst keyFromLoc = _ref => {\n  let {\n    start,\n    end\n  } = _ref;\n  return `${start.line}|${start.column}|${end.line}|${end.column}`;\n};\n\nconst mergeProp = function (aHits, aMap, bHits, bMap) {\n  let itemKey = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : keyFromLoc;\n  const aItems = {};\n\n  for (const [key, itemHits] of Object.entries(aHits)) {\n    const item = aMap[key];\n    aItems[itemKey(item)] = [itemHits, item];\n  }\n\n  for (const [key, bItemHits] of Object.entries(bHits)) {\n    const bItem = bMap[key];\n    const k = itemKey(bItem);\n\n    if (aItems[k]) {\n      const aPair = aItems[k];\n\n      if (bItemHits.forEach) {\n        // should this throw an exception if aPair[0] is not an array?\n        bItemHits.forEach((hits, h) => {\n          if (aPair[0][h] !== undefined) aPair[0][h] += hits;else aPair[0][h] = hits;\n        });\n      } else {\n        aPair[0] += bItemHits;\n      }\n    } else {\n      aItems[k] = [bItemHits, bItem];\n    }\n  }\n\n  const hits = {};\n  const map = {};\n  Object.values(aItems).forEach((_ref2, i) => {\n    let [itemHits, item] = _ref2;\n    hits[i] = itemHits;\n    map[i] = item;\n  });\n  return [hits, map];\n};\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n */\n\n\nclass FileCoverage {\n  /**\n   * @constructor\n   * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n   * and empty coverage object with the specified file path or a data object that\n   * has all the required properties for a file coverage object.\n   */\n  constructor(pathOrObj) {\n    let reportLogic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!pathOrObj) {\n      throw new Error('Coverage must be initialized with a path or an object');\n    }\n\n    if (typeof pathOrObj === 'string') {\n      this.data = emptyCoverage(pathOrObj, reportLogic);\n    } else if (pathOrObj instanceof FileCoverage) {\n      this.data = pathOrObj.data;\n    } else if (typeof pathOrObj === 'object') {\n      this.data = pathOrObj;\n    } else {\n      throw new Error('Invalid argument to coverage constructor');\n    }\n\n    assertValidObject(this.data);\n  }\n  /**\n   * returns computed line coverage from statement coverage.\n   * This is a map of hits keyed by line number in the source.\n   */\n\n\n  getLineCoverage() {\n    const statementMap = this.data.statementMap;\n    const statements = this.data.s;\n    const lineMap = Object.create(null);\n    Object.entries(statements).forEach(_ref3 => {\n      let [st, count] = _ref3;\n\n      /* istanbul ignore if: is this even possible? */\n      if (!statementMap[st]) {\n        return;\n      }\n\n      const {\n        line\n      } = statementMap[st].start;\n      const prevVal = lineMap[line];\n\n      if (prevVal === undefined || prevVal < count) {\n        lineMap[line] = count;\n      }\n    });\n    return lineMap;\n  }\n  /**\n   * returns an array of uncovered line numbers.\n   * @returns {Array} an array of line numbers for which no hits have been\n   *  collected.\n   */\n\n\n  getUncoveredLines() {\n    const lc = this.getLineCoverage();\n    const ret = [];\n    Object.entries(lc).forEach(_ref4 => {\n      let [l, hits] = _ref4;\n\n      if (hits === 0) {\n        ret.push(l);\n      }\n    });\n    return ret;\n  }\n  /**\n   * returns a map of branch coverage by source line number.\n   * @returns {Object} an object keyed by line number. Each object\n   * has a `covered`, `total` and `coverage` (percentage) property.\n   */\n\n\n  getBranchCoverageByLine() {\n    const branchMap = this.branchMap;\n    const branches = this.b;\n    const ret = {};\n    Object.entries(branchMap).forEach(_ref5 => {\n      let [k, map] = _ref5;\n      const line = map.line || map.loc.start.line;\n      const branchData = branches[k];\n      ret[line] = ret[line] || [];\n      ret[line].push(...branchData);\n    });\n    Object.entries(ret).forEach(_ref6 => {\n      let [k, dataArray] = _ref6;\n      const covered = dataArray.filter(item => item > 0);\n      const coverage = covered.length / dataArray.length * 100;\n      ret[k] = {\n        covered: covered.length,\n        total: dataArray.length,\n        coverage\n      };\n    });\n    return ret;\n  }\n  /**\n   * return a JSON-serializable POJO for this file coverage object\n   */\n\n\n  toJSON() {\n    return this.data;\n  }\n  /**\n   * merges a second coverage object into this one, updating hit counts\n   * @param {FileCoverage} other - the coverage object to be merged into this one.\n   *  Note that the other object should have the same structure as this one (same file).\n   */\n\n\n  merge(other) {\n    if (other.all === true) {\n      return;\n    }\n\n    if (this.all === true) {\n      this.data = other.data;\n      return;\n    }\n\n    let [hits, map] = mergeProp(this.s, this.statementMap, other.s, other.statementMap);\n    this.data.s = hits;\n    this.data.statementMap = map;\n\n    const keyFromLocProp = x => keyFromLoc(x.loc);\n\n    const keyFromLocationsProp = x => keyFromLoc(x.locations[0]);\n\n    [hits, map] = mergeProp(this.f, this.fnMap, other.f, other.fnMap, keyFromLocProp);\n    this.data.f = hits;\n    this.data.fnMap = map;\n    [hits, map] = mergeProp(this.b, this.branchMap, other.b, other.branchMap, keyFromLocationsProp);\n    this.data.b = hits;\n    this.data.branchMap = map; // Tracking additional information about branch truthiness\n    // can be optionally enabled:\n\n    if (this.bT && other.bT) {\n      [hits, map] = mergeProp(this.bT, this.branchMap, other.bT, other.branchMap, keyFromLocationsProp);\n      this.data.bT = hits;\n    }\n  }\n\n  computeSimpleTotals(property) {\n    let stats = this[property];\n\n    if (typeof stats === 'function') {\n      stats = stats.call(this);\n    }\n\n    const ret = {\n      total: Object.keys(stats).length,\n      covered: Object.values(stats).filter(v => !!v).length,\n      skipped: 0\n    };\n    ret.pct = percent(ret.covered, ret.total);\n    return ret;\n  }\n\n  computeBranchTotals(property) {\n    const stats = this[property];\n    const ret = {\n      total: 0,\n      covered: 0,\n      skipped: 0\n    };\n    Object.values(stats).forEach(branches => {\n      ret.covered += branches.filter(hits => hits > 0).length;\n      ret.total += branches.length;\n    });\n    ret.pct = percent(ret.covered, ret.total);\n    return ret;\n  }\n  /**\n   * resets hit counts for all statements, functions and branches\n   * in this coverage object resulting in zero coverage.\n   */\n\n\n  resetHits() {\n    const statements = this.s;\n    const functions = this.f;\n    const branches = this.b;\n    const branchesTrue = this.bT;\n    Object.keys(statements).forEach(s => {\n      statements[s] = 0;\n    });\n    Object.keys(functions).forEach(f => {\n      functions[f] = 0;\n    });\n    Object.keys(branches).forEach(b => {\n      branches[b].fill(0);\n    }); // Tracking additional information about branch truthiness\n    // can be optionally enabled:\n\n    if (branchesTrue) {\n      Object.keys(branchesTrue).forEach(bT => {\n        branchesTrue[bT].fill(0);\n      });\n    }\n  }\n  /**\n   * returns a CoverageSummary for this file coverage object\n   * @returns {CoverageSummary}\n   */\n\n\n  toSummary() {\n    const ret = {};\n    ret.lines = this.computeSimpleTotals('getLineCoverage');\n    ret.functions = this.computeSimpleTotals('f', 'fnMap');\n    ret.statements = this.computeSimpleTotals('s', 'statementMap');\n    ret.branches = this.computeBranchTotals('b'); // Tracking additional information about branch truthiness\n    // can be optionally enabled:\n\n    if (this['bt']) {\n      ret.branchesTrue = this.computeBranchTotals('bT');\n    }\n\n    return new CoverageSummary(ret);\n  }\n\n} // expose coverage data attributes\n\n\ndataProperties(FileCoverage, ['path', 'statementMap', 'fnMap', 'branchMap', 's', 'f', 'b', 'bT', 'all']);\nmodule.exports = {\n  FileCoverage\n};","map":{"version":3,"names":["percent","require","dataProperties","CoverageSummary","emptyCoverage","filePath","reportLogic","cov","path","statementMap","fnMap","branchMap","s","f","b","bT","assertValidObject","obj","valid","Error","Object","keys","join","keyFromLoc","start","end","line","column","mergeProp","aHits","aMap","bHits","bMap","itemKey","aItems","key","itemHits","entries","item","bItemHits","bItem","k","aPair","forEach","hits","h","undefined","map","values","i","FileCoverage","constructor","pathOrObj","data","getLineCoverage","statements","lineMap","create","st","count","prevVal","getUncoveredLines","lc","ret","l","push","getBranchCoverageByLine","branches","loc","branchData","dataArray","covered","filter","coverage","length","total","toJSON","merge","other","all","keyFromLocProp","x","keyFromLocationsProp","locations","computeSimpleTotals","property","stats","call","v","skipped","pct","computeBranchTotals","resetHits","functions","branchesTrue","fill","toSummary","lines","module","exports"],"sources":["/home/locr/SE_Work/phase2Project/node_modules/istanbul-lib-coverage/lib/file-coverage.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\nconst dataProperties = require('./data-properties');\nconst { CoverageSummary } = require('./coverage-summary');\n\n// returns a data object that represents empty coverage\nfunction emptyCoverage(filePath, reportLogic) {\n    const cov = {\n        path: filePath,\n        statementMap: {},\n        fnMap: {},\n        branchMap: {},\n        s: {},\n        f: {},\n        b: {}\n    };\n    if (reportLogic) cov.bT = {};\n    return cov;\n}\n\n// asserts that a data object \"looks like\" a coverage object\nfunction assertValidObject(obj) {\n    const valid =\n        obj &&\n        obj.path &&\n        obj.statementMap &&\n        obj.fnMap &&\n        obj.branchMap &&\n        obj.s &&\n        obj.f &&\n        obj.b;\n    if (!valid) {\n        throw new Error(\n            'Invalid file coverage object, missing keys, found:' +\n                Object.keys(obj).join(',')\n        );\n    }\n}\n\nconst keyFromLoc = ({ start, end }) =>\n    `${start.line}|${start.column}|${end.line}|${end.column}`;\n\nconst mergeProp = (aHits, aMap, bHits, bMap, itemKey = keyFromLoc) => {\n    const aItems = {};\n    for (const [key, itemHits] of Object.entries(aHits)) {\n        const item = aMap[key];\n        aItems[itemKey(item)] = [itemHits, item];\n    }\n    for (const [key, bItemHits] of Object.entries(bHits)) {\n        const bItem = bMap[key];\n        const k = itemKey(bItem);\n\n        if (aItems[k]) {\n            const aPair = aItems[k];\n            if (bItemHits.forEach) {\n                // should this throw an exception if aPair[0] is not an array?\n                bItemHits.forEach((hits, h) => {\n                    if (aPair[0][h] !== undefined) aPair[0][h] += hits;\n                    else aPair[0][h] = hits;\n                });\n            } else {\n                aPair[0] += bItemHits;\n            }\n        } else {\n            aItems[k] = [bItemHits, bItem];\n        }\n    }\n    const hits = {};\n    const map = {};\n\n    Object.values(aItems).forEach(([itemHits, item], i) => {\n        hits[i] = itemHits;\n        map[i] = item;\n    });\n\n    return [hits, map];\n};\n\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n */\nclass FileCoverage {\n    /**\n     * @constructor\n     * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n     * and empty coverage object with the specified file path or a data object that\n     * has all the required properties for a file coverage object.\n     */\n    constructor(pathOrObj, reportLogic = false) {\n        if (!pathOrObj) {\n            throw new Error(\n                'Coverage must be initialized with a path or an object'\n            );\n        }\n        if (typeof pathOrObj === 'string') {\n            this.data = emptyCoverage(pathOrObj, reportLogic);\n        } else if (pathOrObj instanceof FileCoverage) {\n            this.data = pathOrObj.data;\n        } else if (typeof pathOrObj === 'object') {\n            this.data = pathOrObj;\n        } else {\n            throw new Error('Invalid argument to coverage constructor');\n        }\n        assertValidObject(this.data);\n    }\n\n    /**\n     * returns computed line coverage from statement coverage.\n     * This is a map of hits keyed by line number in the source.\n     */\n    getLineCoverage() {\n        const statementMap = this.data.statementMap;\n        const statements = this.data.s;\n        const lineMap = Object.create(null);\n\n        Object.entries(statements).forEach(([st, count]) => {\n            /* istanbul ignore if: is this even possible? */\n            if (!statementMap[st]) {\n                return;\n            }\n            const { line } = statementMap[st].start;\n            const prevVal = lineMap[line];\n            if (prevVal === undefined || prevVal < count) {\n                lineMap[line] = count;\n            }\n        });\n        return lineMap;\n    }\n\n    /**\n     * returns an array of uncovered line numbers.\n     * @returns {Array} an array of line numbers for which no hits have been\n     *  collected.\n     */\n    getUncoveredLines() {\n        const lc = this.getLineCoverage();\n        const ret = [];\n        Object.entries(lc).forEach(([l, hits]) => {\n            if (hits === 0) {\n                ret.push(l);\n            }\n        });\n        return ret;\n    }\n\n    /**\n     * returns a map of branch coverage by source line number.\n     * @returns {Object} an object keyed by line number. Each object\n     * has a `covered`, `total` and `coverage` (percentage) property.\n     */\n    getBranchCoverageByLine() {\n        const branchMap = this.branchMap;\n        const branches = this.b;\n        const ret = {};\n        Object.entries(branchMap).forEach(([k, map]) => {\n            const line = map.line || map.loc.start.line;\n            const branchData = branches[k];\n            ret[line] = ret[line] || [];\n            ret[line].push(...branchData);\n        });\n        Object.entries(ret).forEach(([k, dataArray]) => {\n            const covered = dataArray.filter(item => item > 0);\n            const coverage = (covered.length / dataArray.length) * 100;\n            ret[k] = {\n                covered: covered.length,\n                total: dataArray.length,\n                coverage\n            };\n        });\n        return ret;\n    }\n\n    /**\n     * return a JSON-serializable POJO for this file coverage object\n     */\n    toJSON() {\n        return this.data;\n    }\n\n    /**\n     * merges a second coverage object into this one, updating hit counts\n     * @param {FileCoverage} other - the coverage object to be merged into this one.\n     *  Note that the other object should have the same structure as this one (same file).\n     */\n    merge(other) {\n        if (other.all === true) {\n            return;\n        }\n\n        if (this.all === true) {\n            this.data = other.data;\n            return;\n        }\n\n        let [hits, map] = mergeProp(\n            this.s,\n            this.statementMap,\n            other.s,\n            other.statementMap\n        );\n        this.data.s = hits;\n        this.data.statementMap = map;\n\n        const keyFromLocProp = x => keyFromLoc(x.loc);\n        const keyFromLocationsProp = x => keyFromLoc(x.locations[0]);\n\n        [hits, map] = mergeProp(\n            this.f,\n            this.fnMap,\n            other.f,\n            other.fnMap,\n            keyFromLocProp\n        );\n        this.data.f = hits;\n        this.data.fnMap = map;\n\n        [hits, map] = mergeProp(\n            this.b,\n            this.branchMap,\n            other.b,\n            other.branchMap,\n            keyFromLocationsProp\n        );\n        this.data.b = hits;\n        this.data.branchMap = map;\n\n        // Tracking additional information about branch truthiness\n        // can be optionally enabled:\n        if (this.bT && other.bT) {\n            [hits, map] = mergeProp(\n                this.bT,\n                this.branchMap,\n                other.bT,\n                other.branchMap,\n                keyFromLocationsProp\n            );\n            this.data.bT = hits;\n        }\n    }\n\n    computeSimpleTotals(property) {\n        let stats = this[property];\n\n        if (typeof stats === 'function') {\n            stats = stats.call(this);\n        }\n\n        const ret = {\n            total: Object.keys(stats).length,\n            covered: Object.values(stats).filter(v => !!v).length,\n            skipped: 0\n        };\n        ret.pct = percent(ret.covered, ret.total);\n        return ret;\n    }\n\n    computeBranchTotals(property) {\n        const stats = this[property];\n        const ret = { total: 0, covered: 0, skipped: 0 };\n\n        Object.values(stats).forEach(branches => {\n            ret.covered += branches.filter(hits => hits > 0).length;\n            ret.total += branches.length;\n        });\n        ret.pct = percent(ret.covered, ret.total);\n        return ret;\n    }\n\n    /**\n     * resets hit counts for all statements, functions and branches\n     * in this coverage object resulting in zero coverage.\n     */\n    resetHits() {\n        const statements = this.s;\n        const functions = this.f;\n        const branches = this.b;\n        const branchesTrue = this.bT;\n        Object.keys(statements).forEach(s => {\n            statements[s] = 0;\n        });\n        Object.keys(functions).forEach(f => {\n            functions[f] = 0;\n        });\n        Object.keys(branches).forEach(b => {\n            branches[b].fill(0);\n        });\n        // Tracking additional information about branch truthiness\n        // can be optionally enabled:\n        if (branchesTrue) {\n            Object.keys(branchesTrue).forEach(bT => {\n                branchesTrue[bT].fill(0);\n            });\n        }\n    }\n\n    /**\n     * returns a CoverageSummary for this file coverage object\n     * @returns {CoverageSummary}\n     */\n    toSummary() {\n        const ret = {};\n        ret.lines = this.computeSimpleTotals('getLineCoverage');\n        ret.functions = this.computeSimpleTotals('f', 'fnMap');\n        ret.statements = this.computeSimpleTotals('s', 'statementMap');\n        ret.branches = this.computeBranchTotals('b');\n        // Tracking additional information about branch truthiness\n        // can be optionally enabled:\n        if (this['bt']) {\n            ret.branchesTrue = this.computeBranchTotals('bT');\n        }\n        return new CoverageSummary(ret);\n    }\n}\n\n// expose coverage data attributes\ndataProperties(FileCoverage, [\n    'path',\n    'statementMap',\n    'fnMap',\n    'branchMap',\n    's',\n    'f',\n    'b',\n    'bT',\n    'all'\n]);\n\nmodule.exports = {\n    FileCoverage\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAM;EAAEE;AAAF,IAAsBF,OAAO,CAAC,oBAAD,CAAnC,C,CAEA;;;AACA,SAASG,aAAT,CAAuBC,QAAvB,EAAiCC,WAAjC,EAA8C;EAC1C,MAAMC,GAAG,GAAG;IACRC,IAAI,EAAEH,QADE;IAERI,YAAY,EAAE,EAFN;IAGRC,KAAK,EAAE,EAHC;IAIRC,SAAS,EAAE,EAJH;IAKRC,CAAC,EAAE,EALK;IAMRC,CAAC,EAAE,EANK;IAORC,CAAC,EAAE;EAPK,CAAZ;EASA,IAAIR,WAAJ,EAAiBC,GAAG,CAACQ,EAAJ,GAAS,EAAT;EACjB,OAAOR,GAAP;AACH,C,CAED;;;AACA,SAASS,iBAAT,CAA2BC,GAA3B,EAAgC;EAC5B,MAAMC,KAAK,GACPD,GAAG,IACHA,GAAG,CAACT,IADJ,IAEAS,GAAG,CAACR,YAFJ,IAGAQ,GAAG,CAACP,KAHJ,IAIAO,GAAG,CAACN,SAJJ,IAKAM,GAAG,CAACL,CALJ,IAMAK,GAAG,CAACJ,CANJ,IAOAI,GAAG,CAACH,CARR;;EASA,IAAI,CAACI,KAAL,EAAY;IACR,MAAM,IAAIC,KAAJ,CACF,uDACIC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,IAAjB,CAAsB,GAAtB,CAFF,CAAN;EAIH;AACJ;;AAED,MAAMC,UAAU,GAAG;EAAA,IAAC;IAAEC,KAAF;IAASC;EAAT,CAAD;EAAA,OACd,GAAED,KAAK,CAACE,IAAK,IAAGF,KAAK,CAACG,MAAO,IAAGF,GAAG,CAACC,IAAK,IAAGD,GAAG,CAACE,MAAO,EADzC;AAAA,CAAnB;;AAGA,MAAMC,SAAS,GAAG,UAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,EAAqBC,IAArB,EAAoD;EAAA,IAAzBC,OAAyB,uEAAfV,UAAe;EAClE,MAAMW,MAAM,GAAG,EAAf;;EACA,KAAK,MAAM,CAACC,GAAD,EAAMC,QAAN,CAAX,IAA8BhB,MAAM,CAACiB,OAAP,CAAeR,KAAf,CAA9B,EAAqD;IACjD,MAAMS,IAAI,GAAGR,IAAI,CAACK,GAAD,CAAjB;IACAD,MAAM,CAACD,OAAO,CAACK,IAAD,CAAR,CAAN,GAAwB,CAACF,QAAD,EAAWE,IAAX,CAAxB;EACH;;EACD,KAAK,MAAM,CAACH,GAAD,EAAMI,SAAN,CAAX,IAA+BnB,MAAM,CAACiB,OAAP,CAAeN,KAAf,CAA/B,EAAsD;IAClD,MAAMS,KAAK,GAAGR,IAAI,CAACG,GAAD,CAAlB;IACA,MAAMM,CAAC,GAAGR,OAAO,CAACO,KAAD,CAAjB;;IAEA,IAAIN,MAAM,CAACO,CAAD,CAAV,EAAe;MACX,MAAMC,KAAK,GAAGR,MAAM,CAACO,CAAD,CAApB;;MACA,IAAIF,SAAS,CAACI,OAAd,EAAuB;QACnB;QACAJ,SAAS,CAACI,OAAV,CAAkB,CAACC,IAAD,EAAOC,CAAP,KAAa;UAC3B,IAAIH,KAAK,CAAC,CAAD,CAAL,CAASG,CAAT,MAAgBC,SAApB,EAA+BJ,KAAK,CAAC,CAAD,CAAL,CAASG,CAAT,KAAeD,IAAf,CAA/B,KACKF,KAAK,CAAC,CAAD,CAAL,CAASG,CAAT,IAAcD,IAAd;QACR,CAHD;MAIH,CAND,MAMO;QACHF,KAAK,CAAC,CAAD,CAAL,IAAYH,SAAZ;MACH;IACJ,CAXD,MAWO;MACHL,MAAM,CAACO,CAAD,CAAN,GAAY,CAACF,SAAD,EAAYC,KAAZ,CAAZ;IACH;EACJ;;EACD,MAAMI,IAAI,GAAG,EAAb;EACA,MAAMG,GAAG,GAAG,EAAZ;EAEA3B,MAAM,CAAC4B,MAAP,CAAcd,MAAd,EAAsBS,OAAtB,CAA8B,QAAmBM,CAAnB,KAAyB;IAAA,IAAxB,CAACb,QAAD,EAAWE,IAAX,CAAwB;IACnDM,IAAI,CAACK,CAAD,CAAJ,GAAUb,QAAV;IACAW,GAAG,CAACE,CAAD,CAAH,GAASX,IAAT;EACH,CAHD;EAKA,OAAO,CAACM,IAAD,EAAOG,GAAP,CAAP;AACH,CAlCD;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,YAAN,CAAmB;EACf;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,SAAD,EAAiC;IAAA,IAArB9C,WAAqB,uEAAP,KAAO;;IACxC,IAAI,CAAC8C,SAAL,EAAgB;MACZ,MAAM,IAAIjC,KAAJ,CACF,uDADE,CAAN;IAGH;;IACD,IAAI,OAAOiC,SAAP,KAAqB,QAAzB,EAAmC;MAC/B,KAAKC,IAAL,GAAYjD,aAAa,CAACgD,SAAD,EAAY9C,WAAZ,CAAzB;IACH,CAFD,MAEO,IAAI8C,SAAS,YAAYF,YAAzB,EAAuC;MAC1C,KAAKG,IAAL,GAAYD,SAAS,CAACC,IAAtB;IACH,CAFM,MAEA,IAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;MACtC,KAAKC,IAAL,GAAYD,SAAZ;IACH,CAFM,MAEA;MACH,MAAM,IAAIjC,KAAJ,CAAU,0CAAV,CAAN;IACH;;IACDH,iBAAiB,CAAC,KAAKqC,IAAN,CAAjB;EACH;EAED;AACJ;AACA;AACA;;;EACIC,eAAe,GAAG;IACd,MAAM7C,YAAY,GAAG,KAAK4C,IAAL,CAAU5C,YAA/B;IACA,MAAM8C,UAAU,GAAG,KAAKF,IAAL,CAAUzC,CAA7B;IACA,MAAM4C,OAAO,GAAGpC,MAAM,CAACqC,MAAP,CAAc,IAAd,CAAhB;IAEArC,MAAM,CAACiB,OAAP,CAAekB,UAAf,EAA2BZ,OAA3B,CAAmC,SAAiB;MAAA,IAAhB,CAACe,EAAD,EAAKC,KAAL,CAAgB;;MAChD;MACA,IAAI,CAAClD,YAAY,CAACiD,EAAD,CAAjB,EAAuB;QACnB;MACH;;MACD,MAAM;QAAEhC;MAAF,IAAWjB,YAAY,CAACiD,EAAD,CAAZ,CAAiBlC,KAAlC;MACA,MAAMoC,OAAO,GAAGJ,OAAO,CAAC9B,IAAD,CAAvB;;MACA,IAAIkC,OAAO,KAAKd,SAAZ,IAAyBc,OAAO,GAAGD,KAAvC,EAA8C;QAC1CH,OAAO,CAAC9B,IAAD,CAAP,GAAgBiC,KAAhB;MACH;IACJ,CAVD;IAWA,OAAOH,OAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIK,iBAAiB,GAAG;IAChB,MAAMC,EAAE,GAAG,KAAKR,eAAL,EAAX;IACA,MAAMS,GAAG,GAAG,EAAZ;IACA3C,MAAM,CAACiB,OAAP,CAAeyB,EAAf,EAAmBnB,OAAnB,CAA2B,SAAe;MAAA,IAAd,CAACqB,CAAD,EAAIpB,IAAJ,CAAc;;MACtC,IAAIA,IAAI,KAAK,CAAb,EAAgB;QACZmB,GAAG,CAACE,IAAJ,CAASD,CAAT;MACH;IACJ,CAJD;IAKA,OAAOD,GAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIG,uBAAuB,GAAG;IACtB,MAAMvD,SAAS,GAAG,KAAKA,SAAvB;IACA,MAAMwD,QAAQ,GAAG,KAAKrD,CAAtB;IACA,MAAMiD,GAAG,GAAG,EAAZ;IACA3C,MAAM,CAACiB,OAAP,CAAe1B,SAAf,EAA0BgC,OAA1B,CAAkC,SAAc;MAAA,IAAb,CAACF,CAAD,EAAIM,GAAJ,CAAa;MAC5C,MAAMrB,IAAI,GAAGqB,GAAG,CAACrB,IAAJ,IAAYqB,GAAG,CAACqB,GAAJ,CAAQ5C,KAAR,CAAcE,IAAvC;MACA,MAAM2C,UAAU,GAAGF,QAAQ,CAAC1B,CAAD,CAA3B;MACAsB,GAAG,CAACrC,IAAD,CAAH,GAAYqC,GAAG,CAACrC,IAAD,CAAH,IAAa,EAAzB;MACAqC,GAAG,CAACrC,IAAD,CAAH,CAAUuC,IAAV,CAAe,GAAGI,UAAlB;IACH,CALD;IAMAjD,MAAM,CAACiB,OAAP,CAAe0B,GAAf,EAAoBpB,OAApB,CAA4B,SAAoB;MAAA,IAAnB,CAACF,CAAD,EAAI6B,SAAJ,CAAmB;MAC5C,MAAMC,OAAO,GAAGD,SAAS,CAACE,MAAV,CAAiBlC,IAAI,IAAIA,IAAI,GAAG,CAAhC,CAAhB;MACA,MAAMmC,QAAQ,GAAIF,OAAO,CAACG,MAAR,GAAiBJ,SAAS,CAACI,MAA5B,GAAsC,GAAvD;MACAX,GAAG,CAACtB,CAAD,CAAH,GAAS;QACL8B,OAAO,EAAEA,OAAO,CAACG,MADZ;QAELC,KAAK,EAAEL,SAAS,CAACI,MAFZ;QAGLD;MAHK,CAAT;IAKH,CARD;IASA,OAAOV,GAAP;EACH;EAED;AACJ;AACA;;;EACIa,MAAM,GAAG;IACL,OAAO,KAAKvB,IAAZ;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIwB,KAAK,CAACC,KAAD,EAAQ;IACT,IAAIA,KAAK,CAACC,GAAN,KAAc,IAAlB,EAAwB;MACpB;IACH;;IAED,IAAI,KAAKA,GAAL,KAAa,IAAjB,EAAuB;MACnB,KAAK1B,IAAL,GAAYyB,KAAK,CAACzB,IAAlB;MACA;IACH;;IAED,IAAI,CAACT,IAAD,EAAOG,GAAP,IAAcnB,SAAS,CACvB,KAAKhB,CADkB,EAEvB,KAAKH,YAFkB,EAGvBqE,KAAK,CAAClE,CAHiB,EAIvBkE,KAAK,CAACrE,YAJiB,CAA3B;IAMA,KAAK4C,IAAL,CAAUzC,CAAV,GAAcgC,IAAd;IACA,KAAKS,IAAL,CAAU5C,YAAV,GAAyBsC,GAAzB;;IAEA,MAAMiC,cAAc,GAAGC,CAAC,IAAI1D,UAAU,CAAC0D,CAAC,CAACb,GAAH,CAAtC;;IACA,MAAMc,oBAAoB,GAAGD,CAAC,IAAI1D,UAAU,CAAC0D,CAAC,CAACE,SAAF,CAAY,CAAZ,CAAD,CAA5C;;IAEA,CAACvC,IAAD,EAAOG,GAAP,IAAcnB,SAAS,CACnB,KAAKf,CADc,EAEnB,KAAKH,KAFc,EAGnBoE,KAAK,CAACjE,CAHa,EAInBiE,KAAK,CAACpE,KAJa,EAKnBsE,cALmB,CAAvB;IAOA,KAAK3B,IAAL,CAAUxC,CAAV,GAAc+B,IAAd;IACA,KAAKS,IAAL,CAAU3C,KAAV,GAAkBqC,GAAlB;IAEA,CAACH,IAAD,EAAOG,GAAP,IAAcnB,SAAS,CACnB,KAAKd,CADc,EAEnB,KAAKH,SAFc,EAGnBmE,KAAK,CAAChE,CAHa,EAInBgE,KAAK,CAACnE,SAJa,EAKnBuE,oBALmB,CAAvB;IAOA,KAAK7B,IAAL,CAAUvC,CAAV,GAAc8B,IAAd;IACA,KAAKS,IAAL,CAAU1C,SAAV,GAAsBoC,GAAtB,CAxCS,CA0CT;IACA;;IACA,IAAI,KAAKhC,EAAL,IAAW+D,KAAK,CAAC/D,EAArB,EAAyB;MACrB,CAAC6B,IAAD,EAAOG,GAAP,IAAcnB,SAAS,CACnB,KAAKb,EADc,EAEnB,KAAKJ,SAFc,EAGnBmE,KAAK,CAAC/D,EAHa,EAInB+D,KAAK,CAACnE,SAJa,EAKnBuE,oBALmB,CAAvB;MAOA,KAAK7B,IAAL,CAAUtC,EAAV,GAAe6B,IAAf;IACH;EACJ;;EAEDwC,mBAAmB,CAACC,QAAD,EAAW;IAC1B,IAAIC,KAAK,GAAG,KAAKD,QAAL,CAAZ;;IAEA,IAAI,OAAOC,KAAP,KAAiB,UAArB,EAAiC;MAC7BA,KAAK,GAAGA,KAAK,CAACC,IAAN,CAAW,IAAX,CAAR;IACH;;IAED,MAAMxB,GAAG,GAAG;MACRY,KAAK,EAAEvD,MAAM,CAACC,IAAP,CAAYiE,KAAZ,EAAmBZ,MADlB;MAERH,OAAO,EAAEnD,MAAM,CAAC4B,MAAP,CAAcsC,KAAd,EAAqBd,MAArB,CAA4BgB,CAAC,IAAI,CAAC,CAACA,CAAnC,EAAsCd,MAFvC;MAGRe,OAAO,EAAE;IAHD,CAAZ;IAKA1B,GAAG,CAAC2B,GAAJ,GAAU1F,OAAO,CAAC+D,GAAG,CAACQ,OAAL,EAAcR,GAAG,CAACY,KAAlB,CAAjB;IACA,OAAOZ,GAAP;EACH;;EAED4B,mBAAmB,CAACN,QAAD,EAAW;IAC1B,MAAMC,KAAK,GAAG,KAAKD,QAAL,CAAd;IACA,MAAMtB,GAAG,GAAG;MAAEY,KAAK,EAAE,CAAT;MAAYJ,OAAO,EAAE,CAArB;MAAwBkB,OAAO,EAAE;IAAjC,CAAZ;IAEArE,MAAM,CAAC4B,MAAP,CAAcsC,KAAd,EAAqB3C,OAArB,CAA6BwB,QAAQ,IAAI;MACrCJ,GAAG,CAACQ,OAAJ,IAAeJ,QAAQ,CAACK,MAAT,CAAgB5B,IAAI,IAAIA,IAAI,GAAG,CAA/B,EAAkC8B,MAAjD;MACAX,GAAG,CAACY,KAAJ,IAAaR,QAAQ,CAACO,MAAtB;IACH,CAHD;IAIAX,GAAG,CAAC2B,GAAJ,GAAU1F,OAAO,CAAC+D,GAAG,CAACQ,OAAL,EAAcR,GAAG,CAACY,KAAlB,CAAjB;IACA,OAAOZ,GAAP;EACH;EAED;AACJ;AACA;AACA;;;EACI6B,SAAS,GAAG;IACR,MAAMrC,UAAU,GAAG,KAAK3C,CAAxB;IACA,MAAMiF,SAAS,GAAG,KAAKhF,CAAvB;IACA,MAAMsD,QAAQ,GAAG,KAAKrD,CAAtB;IACA,MAAMgF,YAAY,GAAG,KAAK/E,EAA1B;IACAK,MAAM,CAACC,IAAP,CAAYkC,UAAZ,EAAwBZ,OAAxB,CAAgC/B,CAAC,IAAI;MACjC2C,UAAU,CAAC3C,CAAD,CAAV,GAAgB,CAAhB;IACH,CAFD;IAGAQ,MAAM,CAACC,IAAP,CAAYwE,SAAZ,EAAuBlD,OAAvB,CAA+B9B,CAAC,IAAI;MAChCgF,SAAS,CAAChF,CAAD,CAAT,GAAe,CAAf;IACH,CAFD;IAGAO,MAAM,CAACC,IAAP,CAAY8C,QAAZ,EAAsBxB,OAAtB,CAA8B7B,CAAC,IAAI;MAC/BqD,QAAQ,CAACrD,CAAD,CAAR,CAAYiF,IAAZ,CAAiB,CAAjB;IACH,CAFD,EAXQ,CAcR;IACA;;IACA,IAAID,YAAJ,EAAkB;MACd1E,MAAM,CAACC,IAAP,CAAYyE,YAAZ,EAA0BnD,OAA1B,CAAkC5B,EAAE,IAAI;QACpC+E,YAAY,CAAC/E,EAAD,CAAZ,CAAiBgF,IAAjB,CAAsB,CAAtB;MACH,CAFD;IAGH;EACJ;EAED;AACJ;AACA;AACA;;;EACIC,SAAS,GAAG;IACR,MAAMjC,GAAG,GAAG,EAAZ;IACAA,GAAG,CAACkC,KAAJ,GAAY,KAAKb,mBAAL,CAAyB,iBAAzB,CAAZ;IACArB,GAAG,CAAC8B,SAAJ,GAAgB,KAAKT,mBAAL,CAAyB,GAAzB,EAA8B,OAA9B,CAAhB;IACArB,GAAG,CAACR,UAAJ,GAAiB,KAAK6B,mBAAL,CAAyB,GAAzB,EAA8B,cAA9B,CAAjB;IACArB,GAAG,CAACI,QAAJ,GAAe,KAAKwB,mBAAL,CAAyB,GAAzB,CAAf,CALQ,CAMR;IACA;;IACA,IAAI,KAAK,IAAL,CAAJ,EAAgB;MACZ5B,GAAG,CAAC+B,YAAJ,GAAmB,KAAKH,mBAAL,CAAyB,IAAzB,CAAnB;IACH;;IACD,OAAO,IAAIxF,eAAJ,CAAoB4D,GAApB,CAAP;EACH;;AAtOc,C,CAyOnB;;;AACA7D,cAAc,CAACgD,YAAD,EAAe,CACzB,MADyB,EAEzB,cAFyB,EAGzB,OAHyB,EAIzB,WAJyB,EAKzB,GALyB,EAMzB,GANyB,EAOzB,GAPyB,EAQzB,IARyB,EASzB,KATyB,CAAf,CAAd;AAYAgD,MAAM,CAACC,OAAP,GAAiB;EACbjD;AADa,CAAjB"},"metadata":{},"sourceType":"script"}
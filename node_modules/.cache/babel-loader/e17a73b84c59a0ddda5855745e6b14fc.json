{"ast":null,"code":"'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nconst INDENT = '  ';\n\nfunction attrString(attrs) {\n  return Object.entries(attrs || {}).map(_ref => {\n    let [k, v] = _ref;\n    return ` ${k}=\"${v}\"`;\n  }).join('');\n}\n/**\n * a utility class to produce well-formed, indented XML\n * @param {ContentWriter} contentWriter the content writer that this utility wraps\n * @constructor\n */\n\n\nclass XMLWriter {\n  constructor(contentWriter) {\n    this.cw = contentWriter;\n    this.stack = [];\n  }\n\n  indent(str) {\n    return this.stack.map(() => INDENT).join('') + str;\n  }\n  /**\n   * writes the opening XML tag with the supplied attributes\n   * @param {String} name tag name\n   * @param {Object} [attrs=null] attrs attributes for the tag\n   */\n\n\n  openTag(name, attrs) {\n    const str = this.indent(`<${name + attrString(attrs)}>`);\n    this.cw.println(str);\n    this.stack.push(name);\n  }\n  /**\n   * closes an open XML tag.\n   * @param {String} name - tag name to close. This must match the writer's\n   *  notion of the tag that is currently open.\n   */\n\n\n  closeTag(name) {\n    if (this.stack.length === 0) {\n      throw new Error(`Attempt to close tag ${name} when not opened`);\n    }\n\n    const stashed = this.stack.pop();\n    const str = `</${name}>`;\n\n    if (stashed !== name) {\n      throw new Error(`Attempt to close tag ${name} when ${stashed} was the one open`);\n    }\n\n    this.cw.println(this.indent(str));\n  }\n  /**\n   * writes a tag and its value opening and closing it at the same time\n   * @param {String} name tag name\n   * @param {Object} [attrs=null] attrs tag attributes\n   * @param {String} [content=null] content optional tag content\n   */\n\n\n  inlineTag(name, attrs, content) {\n    let str = '<' + name + attrString(attrs);\n\n    if (content) {\n      str += `>${content}</${name}>`;\n    } else {\n      str += '/>';\n    }\n\n    str = this.indent(str);\n    this.cw.println(str);\n  }\n  /**\n   * closes all open tags and ends the document\n   */\n\n\n  closeAll() {\n    this.stack.slice().reverse().forEach(name => {\n      this.closeTag(name);\n    });\n  }\n\n}\n\nmodule.exports = XMLWriter;","map":{"version":3,"names":["INDENT","attrString","attrs","Object","entries","map","k","v","join","XMLWriter","constructor","contentWriter","cw","stack","indent","str","openTag","name","println","push","closeTag","length","Error","stashed","pop","inlineTag","content","closeAll","slice","reverse","forEach","module","exports"],"sources":["/home/locr/SE_Work/phase2Project/node_modules/istanbul-lib-report/lib/xml-writer.js"],"sourcesContent":["'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst INDENT = '  ';\n\nfunction attrString(attrs) {\n    return Object.entries(attrs || {})\n        .map(([k, v]) => ` ${k}=\"${v}\"`)\n        .join('');\n}\n\n/**\n * a utility class to produce well-formed, indented XML\n * @param {ContentWriter} contentWriter the content writer that this utility wraps\n * @constructor\n */\nclass XMLWriter {\n    constructor(contentWriter) {\n        this.cw = contentWriter;\n        this.stack = [];\n    }\n\n    indent(str) {\n        return this.stack.map(() => INDENT).join('') + str;\n    }\n\n    /**\n     * writes the opening XML tag with the supplied attributes\n     * @param {String} name tag name\n     * @param {Object} [attrs=null] attrs attributes for the tag\n     */\n    openTag(name, attrs) {\n        const str = this.indent(`<${name + attrString(attrs)}>`);\n        this.cw.println(str);\n        this.stack.push(name);\n    }\n\n    /**\n     * closes an open XML tag.\n     * @param {String} name - tag name to close. This must match the writer's\n     *  notion of the tag that is currently open.\n     */\n    closeTag(name) {\n        if (this.stack.length === 0) {\n            throw new Error(`Attempt to close tag ${name} when not opened`);\n        }\n        const stashed = this.stack.pop();\n        const str = `</${name}>`;\n\n        if (stashed !== name) {\n            throw new Error(\n                `Attempt to close tag ${name} when ${stashed} was the one open`\n            );\n        }\n        this.cw.println(this.indent(str));\n    }\n\n    /**\n     * writes a tag and its value opening and closing it at the same time\n     * @param {String} name tag name\n     * @param {Object} [attrs=null] attrs tag attributes\n     * @param {String} [content=null] content optional tag content\n     */\n    inlineTag(name, attrs, content) {\n        let str = '<' + name + attrString(attrs);\n        if (content) {\n            str += `>${content}</${name}>`;\n        } else {\n            str += '/>';\n        }\n        str = this.indent(str);\n        this.cw.println(str);\n    }\n\n    /**\n     * closes all open tags and ends the document\n     */\n    closeAll() {\n        this.stack\n            .slice()\n            .reverse()\n            .forEach(name => {\n                this.closeTag(name);\n            });\n    }\n}\n\nmodule.exports = XMLWriter;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA,MAAMA,MAAM,GAAG,IAAf;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;EACvB,OAAOC,MAAM,CAACC,OAAP,CAAeF,KAAK,IAAI,EAAxB,EACFG,GADE,CACE;IAAA,IAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD;IAAA,OAAa,IAAGD,CAAE,KAAIC,CAAE,GAAxB;EAAA,CADF,EAEFC,IAFE,CAEG,EAFH,CAAP;AAGH;AAED;AACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAN,CAAgB;EACZC,WAAW,CAACC,aAAD,EAAgB;IACvB,KAAKC,EAAL,GAAUD,aAAV;IACA,KAAKE,KAAL,GAAa,EAAb;EACH;;EAEDC,MAAM,CAACC,GAAD,EAAM;IACR,OAAO,KAAKF,KAAL,CAAWR,GAAX,CAAe,MAAML,MAArB,EAA6BQ,IAA7B,CAAkC,EAAlC,IAAwCO,GAA/C;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,OAAO,CAACC,IAAD,EAAOf,KAAP,EAAc;IACjB,MAAMa,GAAG,GAAG,KAAKD,MAAL,CAAa,IAAGG,IAAI,GAAGhB,UAAU,CAACC,KAAD,CAAQ,GAAzC,CAAZ;IACA,KAAKU,EAAL,CAAQM,OAAR,CAAgBH,GAAhB;IACA,KAAKF,KAAL,CAAWM,IAAX,CAAgBF,IAAhB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIG,QAAQ,CAACH,IAAD,EAAO;IACX,IAAI,KAAKJ,KAAL,CAAWQ,MAAX,KAAsB,CAA1B,EAA6B;MACzB,MAAM,IAAIC,KAAJ,CAAW,wBAAuBL,IAAK,kBAAvC,CAAN;IACH;;IACD,MAAMM,OAAO,GAAG,KAAKV,KAAL,CAAWW,GAAX,EAAhB;IACA,MAAMT,GAAG,GAAI,KAAIE,IAAK,GAAtB;;IAEA,IAAIM,OAAO,KAAKN,IAAhB,EAAsB;MAClB,MAAM,IAAIK,KAAJ,CACD,wBAAuBL,IAAK,SAAQM,OAAQ,mBAD3C,CAAN;IAGH;;IACD,KAAKX,EAAL,CAAQM,OAAR,CAAgB,KAAKJ,MAAL,CAAYC,GAAZ,CAAhB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIU,SAAS,CAACR,IAAD,EAAOf,KAAP,EAAcwB,OAAd,EAAuB;IAC5B,IAAIX,GAAG,GAAG,MAAME,IAAN,GAAahB,UAAU,CAACC,KAAD,CAAjC;;IACA,IAAIwB,OAAJ,EAAa;MACTX,GAAG,IAAK,IAAGW,OAAQ,KAAIT,IAAK,GAA5B;IACH,CAFD,MAEO;MACHF,GAAG,IAAI,IAAP;IACH;;IACDA,GAAG,GAAG,KAAKD,MAAL,CAAYC,GAAZ,CAAN;IACA,KAAKH,EAAL,CAAQM,OAAR,CAAgBH,GAAhB;EACH;EAED;AACJ;AACA;;;EACIY,QAAQ,GAAG;IACP,KAAKd,KAAL,CACKe,KADL,GAEKC,OAFL,GAGKC,OAHL,CAGab,IAAI,IAAI;MACb,KAAKG,QAAL,CAAcH,IAAd;IACH,CALL;EAMH;;AApEW;;AAuEhBc,MAAM,CAACC,OAAP,GAAiBvB,SAAjB"},"metadata":{},"sourceType":"script"}